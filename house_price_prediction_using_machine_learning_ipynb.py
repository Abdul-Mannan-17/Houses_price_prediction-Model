# -*- coding: utf-8 -*-
"""House Price Prediction Using Machine Learning . ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CnFqKFIgDZGQyYubHXYHzlgP1ws9KrPS
"""



"""Importing Dependancies
 
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Importing Bostan house Price Data

"""

house_price_dataset = sklearn.datasets.load_boston()

print(house_price_dataset)

# Loading data set to pandas DataFrames
house_price_dataframe = pd.DataFrame(house_price_dataset.data, columns = house_price_dataset.feature_names)

house_price_dataframe.head()

house_price_dataframe['price'] = house_price_dataset.target

house_price_dataframe.head()

house_price_dataframe.shape

house_price_dataframe.isnull().sum()

house_price_dataframe.describe()

correlation = house_price_dataframe.corr()

plt.figure(figsize=(15,15))
sns.heatmap(correlation, cbar = True, square= True, annot = True, annot_kws= {'size' : 14}, fmt = '.1f', cmap = 'RdYlGn' )

X = house_price_dataframe.drop(['price'], axis = 1)
Y = house_price_dataframe['price']

print(X)
print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

model = XGBRegressor()

model.fit(X_train, Y_train)

training_data_prediction = model.predict(X_train)

from xgboost.training import train
print(training_data_prediction)

# R squre Error
score_1 = metrics.r2_score(Y_train, training_data_prediction)


# Mean Absolute Error

score_2 = metrics.mean_absolute_error(Y_train, training_data_prediction)


print("R Square Error : ", score_1)
print("Mean Absolute Error : ", score_2)

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price of Houses in Bostan")
plt.show()

test_data_prediction = model.predict(X_test)

print(test_data_prediction)

# R sqaure Error

score_3 = metrics.r2_score(Y_test, test_data_prediction)


# Mean Absolute Error
score_4 = metrics.mean_absolute_error(Y_test, test_data_prediction)

print(score_3)
print(score_4)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price of test values of houses of Bostan")
plt.show()